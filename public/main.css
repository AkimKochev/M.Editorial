/*!******************************************************************************************************************************************************!*\
  !*** css ./node_modules/css-loader/dist/cjs.js!./node_modules/postcss-loader/dist/cjs.js!./node_modules/sass-loader/dist/cjs.js!./styles/index.scss ***!
  \******************************************************************************************************************************************************/
html,
body,
div,
span,
applet,
object,
iframe,
h1,
h2,
h3,
h4,
h5,
h6,
p,
blockquote,
pre,
a,
abbr,
acronym,
address,
big,
cite,
code,
del,
dfn,
em,
img,
ins,
kbd,
q,
s,
samp,
small,
strike,
strong,
sub,
sup,
tt,
var,
b,
u,
i,
center,
dl,
dt,
dd,
ol,
ul,
li,
fieldset,
form,
label,
legend,
table,
caption,
tbody,
tfoot,
thead,
tr,
th,
td,
article,
aside,
canvas,
details,
embed,
figure,
figcaption,
footer,
header,
hgroup,
menu,
nav,
output,
ruby,
section,
summary,
time,
mark,
audio,
video {
  margin: 0;
  padding: 0;
  border: 0;
  font-size: 100%;
  font: inherit;
  vertical-align: baseline;
}

article,
aside,
details,
figcaption,
figure,
footer,
header,
hgroup,
menu,
nav,
section {
  display: block;
}

body {
  line-height: 1;
}

ol,
ul {
  list-style: none;
}

blockquote,
q {
  quotes: none;
}

blockquote:before,
blockquote:after,
q:before,
q:after {
  content: "";
  content: none;
}

table {
  border-collapse: collapse;
  border-spacing: 0;
}

.navigation {
  position: fixed;
  top: 0;
  left: 0;
  right: 0;
  width: 100%;
}

p {
  font-family: "Helvetica Neue";
  font-size: 1.4rem;
}
@media (max-width: 767px) {
  p {
    font-size: 0.9rem;
  }
}

h3 {
  font-family: "Helvetica Neue";
  font-size: 2.8rem;
}
@media (max-width: 767px) {
  h3 {
    font-size: 1.4rem;
  }
}

h2 {
  font-family: "Helvetica Neue";
  font-size: 6rem;
}
@media (max-width: 767px) {
  h2 {
    font-size: 2.8rem;
  }
}

h1 {
  font-family: "Helvetica Neue";
  font-size: 9rem;
}
@media (max-width: 767px) {
  h1 {
    font-size: 4rem;
  }
}

*,
*::after,
*::before {
  box-sizing: border-box;
  user-select: none;
}

img {
  width: 100%;
  display: block;
  pointer-events: none;
}

html {
  max-height: 100%;
  font-size: 0.6944444444vw;
  overscroll-behavior-y: contain;
}
@media (max-width: 767px) {
  html {
    font-size: 2.4096385542vw;
  }
}

html,
body {
  width: 100%;
}

body {
  font-family: "Helvetica Neue";
  background-color: #f2f2f2;
}

a {
  color: inherit;
  outline: none;
  text-decoration: none;
  display: inline-block;
  width: 100%;
  height: 100%;
}

p,
h1,
h2,
h3,
h4 {
  line-height: 0.5;
}

canvas {
  position: relative;
  pointer-events: none;
}

button {
  background: none;
  border: none;
  outline: none;
}

span {
  display: inline-block;
  overflow: hidden;
  will-change: transform;
}

span > span {
  line-height: 1.1;
}

@font-face {
  font-family: "Helvetica Neue";
  src: url(695e35a222ed56548e8b.otf) format("otf");
  font-weight: normal;
  font-style: normal;
  font-display: swap;
}
.preloader {
  background-color: #f2f2f2;
  z-index: 9;
  padding-inline: 20px;
  padding-block: 50px 20px;
  top: 0;
  left: 0;
  bottom: 0;
  right: 0;
  position: absolute;
}
.preloader__container {
  overflow: hidden;
  position: absolute;
  top: 50%;
  left: 50%;
  transform: translate(-50%, -50%);
}
.preloader__number {
  overflow: hidden;
  line-height: 1;
  position: absolute;
  top: 90%;
  left: 50%;
  transform: translate(-50%, -50%);
}

.cursor__inner,
.cursor__outer {
  position: fixed;
  border-radius: 50%;
  z-index: 10;
  mix-blend-mode: difference;
  pointer-events: none;
  will-change: transform;
}

.cursor__inner {
  background-color: #f2f2f2;
  width: 9px;
  height: 9px;
}

.cursor__outer {
  border: 1px solid #f2f2f2;
  width: 50px;
  height: 50px;
}

.navigation {
  display: flex;
  justify-content: space-between;
  align-items: end;
  padding: 14px 20px;
  z-index: 8;
}
.navigation__menu__toggle {
  cursor: pointer;
}

.navigation__menu {
  pointer-events: none;
  visibility: hidden;
  opacity: 0;
  overflow: hidden;
  position: fixed;
  bottom: 0;
  left: 0;
  width: 100%;
  height: 100%;
  background-color: #f2f2f2;
  z-index: 7;
}

.navigation__menu.active {
  pointer-events: all;
  visibility: visible;
  opacity: 1;
}

.article {
  position: fixed;
  top: 0;
  left: 0;
  padding-inline: 20px;
  padding-block: 0 20px;
  width: 100%;
  min-height: -webkit-fill-available;
  display: flex;
  justify-content: end;
  flex-direction: column;
  gap: 2rem;
  opacity: 0;
  visibility: hidden;
  overflow: hidden;
}
@media (max-width: 767px) {
  .article {
    height: 100%;
  }
}
.article--active {
  visibility: visible;
  opacity: 1;
}

.article__title {
  position: absolute;
  top: 0;
  right: 7%;
}
@media (max-width: 767px) {
  .article__title {
    position: absolute;
    top: 20%;
    left: 20px;
  }
}

.article__main__description {
  height: 100%;
}
.article__main__description .article__media {
  height: 100%;
  overflow: hidden;
}

.article .article__image__wrapper {
  overflow: hidden;
  height: 100%;
}

.article__content {
  display: grid;
  width: 100%;
  grid-template-columns: 60% 40%;
  grid-template-rows: 1fr;
  height: 40%;
  column-gap: 2rem;
}
@media (max-width: 767px) {
  .article__content {
    column-gap: 0;
    row-gap: 1rem;
    grid-template-columns: 1fr;
  }
}

.article__main__description .article__image {
  position: absolute;
}
.article__main__description .article__image__wrapper {
  position: relative;
}

.article__description__aside {
  display: flex;
  flex-direction: column;
  justify-content: space-between;
  gap: 1rem;
}

@media (max-width: 767px) {
  .article__cite {
    position: absolute;
    top: 33%;
    left: 20px;
  }
}

.description__aside__footer {
  display: flex;
  align-items: end;
  gap: 1rem;
}
.description__aside__footer .article__media {
  width: 55%;
}

.four04 {
  margin-top: 2rem;
}

.home__article__media {
  display: flex;
  gap: 2rem;
  grid-column: 1/3;
}
@media (max-width: 767px) {
  .home__article__media {
    flex-direction: column;
  }
}

.home__article__image__wrapper {
  flex: 1 1 100%;
  overflow: hidden;
}

img {
  width: 100%;
  height: 100%;
  object-fit: cover;
  object-position: center;
  will-change: transform;
}

.home__articles {
  position: fixed;
  top: 0;
  left: 0;
  width: 100%;
  height: 100%;
  min-height: -webkit-fill-available;
  display: flex;
  opacity: 0;
  visibility: hidden;
  overflow: hidden;
}
.home__articles--active {
  visibility: visible;
  opacity: 1;
}

.home__articles__article {
  padding-inline: 20px;
  padding-block: 50px 14px;
  top: 0;
  left: 0;
  bottom: 0;
  right: 0;
  position: absolute;
  display: grid;
  grid-template-rows: 60% calc(40% - 2rem);
  grid-template-columns: repeat(2, 1fr);
  gap: 2rem;
}
@media (max-width: 767px) {
  .home__articles__article {
    grid-template-rows: 60% calc(20% - 2rem) calc(20% - 2rem);
    grid-template-columns: 1fr;
    gap: 0;
    row-gap: 2rem;
  }
}

@media (max-width: 767px) {
  .descriprion--left .home__description__footer {
    margin-block: 3rem auto;
  }
}

.home__article__description {
  display: flex;
  flex-direction: column;
  justify-content: space-between;
}
@media (max-width: 767px) {
  .home__article__description.description--right {
    grid-row: 3;
  }
}

@media (max-width: 767px) {
  .description--right .home__description__header {
    margin-block: auto 3rem;
  }
}

.home__description__header {
  display: flex;
  justify-content: space-between;
}

.home__description__header__aside {
  display: flex;
  flex-direction: column;
  align-items: end;
  justify-content: space-between;
}

.home__header__date {
  margin-inline: auto;
}
@media (max-width: 767px) {
  .home__header__date {
    margin-top: auto;
    margin-inline: 0;
  }
}

.home__description__footer {
  display: flex;
  justify-content: space-between;
  align-items: end;
}

h2 {
  margin-bottom: -5.5px;
}

h2:nth-child(2) > span:nth-child(2) {
  margin-left: 25%;
}

/*# sourceMappingURL=data:application/json;charset=utf-8;base64,*/